// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?         @default("http://res.cloudinary.com/dz12pywzs/image/upload/v1749636867/s2hffialvfvdmqykovpr.jpg")
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  
  Authenticator Authenticator[]
  password          String?
  sharable      Boolean @default(false)
  link          String @default("http://localhost:3000/db/getOtherUserData/")
  content       Content[]

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ContentType {
  document
  tweet
  youtube
  link
}

model Content {
  id           Int @default(autoincrement()) @id
  type         ContentType
  link         String   @unique
  title         String    @unique
  imageUrl      String

  userId       String 
  user User @relation(fields: [userId] , references: [id])

  tags          Tags[]

  updateAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

}

model Tags{
  id          Int @default(autoincrement()) @id
  name        String
  color       String

  contentId   Int
  content Content @relation(fields: [contentId] , references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}